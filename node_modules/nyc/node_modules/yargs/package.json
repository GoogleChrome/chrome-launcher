{
  "_from": "yargs@^10.0.3",
  "_id": "yargs@10.0.3",
  "_inBundle": false,
  "_integrity": "sha512-DqBpQ8NAUX4GyPP/ijDGHsJya4tYqLQrjPr95HNsr1YwL3+daCfvBwg7+gIC6IdJhR2kATh3hb61vjzMWEtjdw==",
  "_location": "/nyc/yargs",
  "_phantomChildren": {
    "code-point-at": "1.1.0",
    "is-fullwidth-code-point": "1.0.0",
    "strip-ansi": "3.0.1",
    "wrap-ansi": "2.1.0"
  },
  "_requested": {
    "type": "range",
    "registry": true,
    "raw": "yargs@^10.0.3",
    "name": "yargs",
    "escapedName": "yargs",
    "rawSpec": "^10.0.3",
    "saveSpec": null,
    "fetchSpec": "^10.0.3"
  },
  "_requiredBy": [
    "/nyc"
  ],
  "_resolved": "https://registry.npmjs.org/yargs/-/yargs-10.0.3.tgz",
  "_shasum": "6542debd9080ad517ec5048fb454efe9e4d4aaae",
  "_shrinkwrap": null,
  "_spec": "yargs@^10.0.3",
  "_where": "/Users/benjamincoe/bcoe/nyc",
  "bugs": {
    "url": "https://github.com/yargs/yargs/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "cliui": "^3.2.0",
    "decamelize": "^1.1.1",
    "find-up": "^2.1.0",
    "get-caller-file": "^1.0.1",
    "os-locale": "^2.0.0",
    "require-directory": "^2.1.1",
    "require-main-filename": "^1.0.1",
    "set-blocking": "^2.0.0",
    "string-width": "^2.0.0",
    "which-module": "^2.0.0",
    "y18n": "^3.2.1",
    "yargs-parser": "^8.0.0"
  },
  "deprecated": false,
  "description": "yargs the modern, pirate-themed, successor to optimist.",
  "devDependencies": {
    "chai": "^3.4.1",
    "chalk": "^1.1.3",
    "coveralls": "^2.11.11",
    "cpr": "^2.0.0",
    "cross-spawn": "^5.0.1",
    "es6-promise": "^4.0.2",
    "hashish": "0.0.4",
    "mocha": "^3.0.1",
    "nyc": "^11.2.1",
    "rimraf": "^2.5.0",
    "standard": "^8.6.0",
    "standard-version": "^4.2.0",
    "which": "^1.2.9",
    "yargs-test-extends": "^1.0.1"
  },
  "engine": {
    "node": ">=4"
  },
  "files": [
    "index.js",
    "yargs.js",
    "lib",
    "locales",
    "completion.sh.hbs",
    "LICENSE"
  ],
  "homepage": "http://yargs.js.org/",
  "keywords": [
    "argument",
    "args",
    "option",
    "parser",
    "parsing",
    "cli",
    "command"
  ],
  "license": "MIT",
  "main": "./index.js",
  "name": "yargs",
  "optionalDependencies": {},
  "readme": "# Yargs\n\n_Yargs is developed on evenings and weekends by\nvolunteers. Why not grab them dinner or a drink?_\n\n[![Support via Gratipay](https://cdn.rawgit.com/gratipay/gratipay-badge/2.3.0/dist/gratipay.svg)](https://gratipay.com/yargs/)\n\n[![Build Status][travis-image]][travis-url]\n[![Coverage Status][coveralls-image]][coveralls-url]\n[![NPM version][npm-image]][npm-url]\n[![Windows Tests][windows-image]][windows-url]\n[![js-standard-style][standard-image]][standard-url]\n[![Conventional Commits][conventional-commits-image]][conventional-commits-url]\n[![Slack][slack-image]][slack-url]\n\n_Having problems? want to contribute? join our [community slack](http://devtoolscommunity.herokuapp.com)_.\n\n> Yargs be a node.js library fer hearties tryin' ter parse optstrings.\n\n<img width=\"250\" src=\"/yargs-logo.png\">\n\nYargs helps you build interactive command line tools, by parsing arguments and generating an elegant user interface. It gives you:\n\n* commands and (grouped) options (`my-program.js serve --port=5000`).\n* a dynamically generated help menu based on your arguments.\n\n> <img width=\"400\" src=\"/screen.png\">\n\n* bash-completion shortcuts for commands and options.\n* and [tons more](/docs/api.md).\n\n## Installation\n\n```bash\nnpm i yargs --save\n```\n\n## Simple Example\n\n````javascript\n#!/usr/bin/env node\nconst argv = require('yargs').argv\n\nif (argv.ships > 3 && argv.distance < 53.5) {\n  console.log('Plunder more riffiwobbles!')\n} else {\n  console.log('Retreat from the xupptumblers!')\n}\n````\n\n```bash\n$ ./plunder.js --ships=4 --distance=22\nPlunder more riffiwobbles!\n\n$ ./plunder.js --ships 12 --distance 98.7\nRetreat from the xupptumblers!\n```\n\n## Complex Example\n\n```js\n#!/usr/bin/env node\nrequire('yargs') // eslint-disable-line\n  .command('serve [port]', 'start the server', (yargs) => {\n    yargs\n      .positional('port', {\n        describe: 'port to bind on',\n        default: 5000\n      })\n  }, (argv) => {\n    if (argv.verbose) console.info(`start server on :${argv.port}`)\n    serve(argv.port)\n  })\n  .option('verbose', {\n    alias: 'v',\n    default: false\n  })\n  .argv\n```\n\nRun the example above with `--help` to see the help for the application.\n\n## Table of Contents\n\n* [Yargs' API](/docs/api.md)\n* [Examples](/docs/examples.md)\n* [Parsing Tricks](/docs/tricks.md)\n  * [Stop the Parser](/docs/tricks.md#stop)\n  * [Negating Boolean Arguments](/docs/tricks.md#negate)\n  * [Numbers](/docs/tricks.md#numbers)\n  * [Arrays](/docs/tricks.md#arrays)\n  * [Objects](/docs/tricks.md#objects)\n* [Advanced Topics](/docs/advanced.md)\n  * [Composing Your App Using Commands](/docs/advanced.md#commands)\n  * [Building Configurable CLI Apps](/docs/advanced.md#configuration)\n  * [Customizing Yargs' Parser](/docs/advanced.md#customizing)\n* [Contributing](/contributing.md)\n\n[travis-url]: https://travis-ci.org/yargs/yargs\n[travis-image]: https://img.shields.io/travis/yargs/yargs/master.svg\n[coveralls-url]: https://coveralls.io/github/yargs/yargs\n[coveralls-image]: https://img.shields.io/coveralls/yargs/yargs.svg\n[npm-url]: https://www.npmjs.com/package/yargs\n[npm-image]: https://img.shields.io/npm/v/yargs.svg\n[windows-url]: https://ci.appveyor.com/project/bcoe/yargs-ljwvf\n[windows-image]: https://img.shields.io/appveyor/ci/bcoe/yargs-ljwvf/master.svg?label=Windows%20Tests\n[standard-image]: https://img.shields.io/badge/code%20style-standard-brightgreen.svg\n[standard-url]: http://standardjs.com/\n[conventional-commits-image]: https://img.shields.io/badge/Conventional%20Commits-1.0.0-yellow.svg\n[conventional-commits-url]: https://conventionalcommits.org/\n[slack-image]: http://devtoolscommunity.herokuapp.com/badge.svg\n[slack-url]: http://devtoolscommunity.herokuapp.com\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/yargs/yargs.git"
  },
  "scripts": {
    "coverage": "nyc report --reporter=text-lcov | coveralls",
    "posttest": "standard",
    "release": "standard-version",
    "test": "nyc --cache mocha --require ./test/before.js --timeout=8000 --check-leaks"
  },
  "standard": {
    "ignore": [
      "**/example/**"
    ]
  },
  "version": "10.0.3"
}
