{
  "_from": "write-file-atomic@^1.1.4",
  "_id": "write-file-atomic@1.3.4",
  "_inBundle": false,
  "_integrity": "sha1-+Aek8LHZ6ROuekgRLmzDrxmRtF8=",
  "_location": "/nyc/write-file-atomic",
  "_phantomChildren": {},
  "_requested": {
    "type": "range",
    "registry": true,
    "raw": "write-file-atomic@^1.1.4",
    "name": "write-file-atomic",
    "escapedName": "write-file-atomic",
    "rawSpec": "^1.1.4",
    "saveSpec": null,
    "fetchSpec": "^1.1.4"
  },
  "_requiredBy": [
    "/nyc/caching-transform"
  ],
  "_resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-1.3.4.tgz",
  "_shasum": "f807a4f0b1d9e913ae7a48112e6cc3af1991b45f",
  "_shrinkwrap": null,
  "_spec": "write-file-atomic@^1.1.4",
  "_where": "/Users/benjamincoe/bcoe/nyc/node_modules/caching-transform",
  "author": {
    "name": "Rebecca Turner",
    "email": "me@re-becca.org",
    "url": "http://re-becca.org"
  },
  "bugs": {
    "url": "https://github.com/iarna/write-file-atomic/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "graceful-fs": "^4.1.11",
    "imurmurhash": "^0.1.4",
    "slide": "^1.1.5"
  },
  "deprecated": false,
  "description": "Write files in an atomic fashion w/configurable ownership",
  "devDependencies": {
    "mkdirp": "^0.5.1",
    "require-inject": "^1.4.0",
    "rimraf": "^2.5.4",
    "standard": "^9.0.2",
    "tap": "^10.3.2"
  },
  "files": [
    "index.js"
  ],
  "homepage": "https://github.com/iarna/write-file-atomic",
  "keywords": [
    "writeFile",
    "atomic"
  ],
  "license": "ISC",
  "main": "index.js",
  "name": "write-file-atomic",
  "optionalDependencies": {},
  "readme": "write-file-atomic\n-----------------\n\nThis is an extension for node's `fs.writeFile` that makes its operation\natomic and allows you set ownership (uid/gid of the file).\n\n### var writeFileAtomic = require('write-file-atomic')<br>writeFileAtomic(filename, data, [options], callback)\n\n* filename **String**\n* data **String** | **Buffer**\n* options **Object**\n  * chown **Object**\n    * uid **Number**\n    * gid **Number**\n  * encoding **String** | **Null** default = 'utf8'\n  * mode **Number** default = 438 (aka 0666 in Octal)\ncallback **Function**\n\nAtomically and asynchronously writes data to a file, replacing the file if it already\nexists.  data can be a string or a buffer.\n\nThe file is initially named `filename + \".\" + murmurhex(__filename, process.pid, ++invocations)`.\nIf writeFile completes successfully then, if passed the **chown** option it will change\nthe ownership of the file. Finally it renames the file back to the filename you specified. If\nit encounters errors at any of these steps it will attempt to unlink the temporary file and then\npass the error back to the caller.\n\nIf provided, the **chown** option requires both **uid** and **gid** properties or else\nyou'll get an error.\n\nThe **encoding** option is ignored if **data** is a buffer. It defaults to 'utf8'.\n\nExample:\n\n```javascript\nwriteFileAtomic('message.txt', 'Hello Node', {chown:{uid:100,gid:50}}, function (err) {\n  if (err) throw err;\n  console.log('It\\'s saved!');\n});\n```\n\n### var writeFileAtomicSync = require('write-file-atomic').sync<br>writeFileAtomicSync(filename, data, [options])\n\nThe synchronous version of **writeFileAtomic**.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/iarna/write-file-atomic.git"
  },
  "scripts": {
    "test": "standard && tap --coverage test/*.js"
  },
  "version": "1.3.4"
}
